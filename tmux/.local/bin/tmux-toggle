#!/bin/sh
# Cross-platform tmux toggle pane script
# Usage: tmux-toggle <toggle_id>
# Example: tmux-toggle 1
#
# Creates toggleable panes that preserve state when hidden/shown
# Each pane gets independent toggles scoped by session+window+pane
# Uses tmux user options (@toggle_marker) for reliable tracking

set -e

# Debug logging (set DEBUG=1 in environment to enable)
DEBUG_LOG="/tmp/tmux-toggle-debug.log"
debug() {
    if [ "${DEBUG:-0}" = "1" ]; then
        echo "$(date '+%H:%M:%S') [$$] $*" >> "$DEBUG_LOG"
    fi
}

TOGGLE_ID="${1:-1}"
shift || true  # Shift to get optional command, ignore error if no args
INIT_COMMAND="$*"  # Everything after toggle ID (optional)

# Validate toggle ID (now supports 1-4)
case "$TOGGLE_ID" in
    1|2|3|4) ;;
    *) echo "Error: Toggle ID must be 1, 2, 3, or 4" >&2; exit 1 ;;
esac

debug "Toggle ID: $TOGGLE_ID, Init command: '$INIT_COMMAND'"

# Get current tmux context using display-message (cross-platform)
SESSION_ID=$(tmux display-message -p '#{session_id}')
WINDOW_ID=$(tmux display-message -p '#{window_id}')
PANE_ID=$(tmux display-message -p '#{pane_id}')

# Check if current pane is a toggle pane using user option
CURRENT_TOGGLE_MARKER=$(tmux show-option -pqv -t "${PANE_ID}" @toggle_marker 2>/dev/null || true)

if [ -n "$CURRENT_TOGGLE_MARKER" ]; then
    # We're in a toggle pane
    # Extract toggle ID from marker (last number after final underscore)
    CURRENT_TOGGLE_ID=$(echo "$CURRENT_TOGGLE_MARKER" | sed 's/.*_//')

    if [ "$CURRENT_TOGGLE_ID" = "$TOGGLE_ID" ]; then
        # This is the matching toggle pane - hide it
        # Use the stored marker name (which has the correct parent pane info)
        MARKER_NAME="$CURRENT_TOGGLE_MARKER"

        # Ensure hidden session exists
        HIDDEN_SESSION="_toggle_hidden"
        if ! tmux has-session -t "$HIDDEN_SESSION" 2>/dev/null; then
            tmux new-session -d -s "$HIDDEN_SESSION"
        fi

        # Save current pane dimensions before hiding
        PANE_WIDTH=$(tmux display-message -p -t "${PANE_ID}" '#{pane_width}')
        PANE_HEIGHT=$(tmux display-message -p -t "${PANE_ID}" '#{pane_height}')
        tmux set-option -p -t "${PANE_ID}" @toggle_width "${PANE_WIDTH}" 2>/dev/null || true
        tmux set-option -p -t "${PANE_ID}" @toggle_height "${PANE_HEIGHT}" 2>/dev/null || true

        # Break this pane to hidden session
        tmux break-pane -d -t "${HIDDEN_SESSION}:" -n "${MARKER_NAME}" -s "${PANE_ID}"
        exit 0
    else
        # Different toggle ID - extract window info and use it
        # Example: toggle_5_54_1 â†’ extract 5, 54
        PARENT_INFO=$(echo "$CURRENT_TOGGLE_MARKER" | sed 's/^toggle_//; s/_[0-9]*$//')
        SESSION_NUM=$(echo "$PARENT_INFO" | cut -d_ -f1)
        WINDOW_NUM=$(echo "$PARENT_INFO" | cut -d_ -f2)

        # Reconstruct parent window ID for subsequent operations
        # This ensures we search for/create toggles in the parent window, not current
        WINDOW_ID="@${WINDOW_NUM}"
    fi
else
    # Not in a toggle pane - use current window info
    # Strip special characters ($@%) to avoid shell expansion issues
    # This converts $5_@54 to 5_54
    SESSION_NUM=$(echo "$SESSION_ID" | tr -d '$@%')
    WINDOW_NUM=$(echo "$WINDOW_ID" | tr -d '$@%')
fi

# Construct unique marker name for this toggle (clean, no special chars)
# Scoped to window level (no pane ID) since pane IDs change when splitting
MARKER_NAME="toggle_${SESSION_NUM}_${WINDOW_NUM}_${TOGGLE_ID}"
debug "MARKER_NAME constructed: $MARKER_NAME (from SESSION=$SESSION_NUM WIN=$WINDOW_NUM ID=$TOGGLE_ID)"

# Use a dedicated hidden session for all toggle panes
HIDDEN_SESSION="_toggle_hidden"

# Ensure hidden session exists
if ! tmux has-session -t "$HIDDEN_SESSION" 2>/dev/null; then
    tmux new-session -d -s "$HIDDEN_SESSION"
fi

# Check if marker window exists in hidden session
# grep -F for fixed string (no regex), -x for exact match
MARKER_EXISTS=$(tmux list-windows -t "${HIDDEN_SESSION}" -F '#{window_name}' 2>/dev/null | grep -Fx "${MARKER_NAME}" || true)

if [ -n "$MARKER_EXISTS" ]; then
    # Marker window exists in hidden session - restore the pane
    # Join it horizontally to current window
    if tmux join-pane -h -s "${HIDDEN_SESSION}:${MARKER_NAME}.0" -t "${WINDOW_ID}" 2>/dev/null; then
        # Successfully joined, now kill the empty marker window
        tmux kill-window -t "${HIDDEN_SESSION}:${MARKER_NAME}" 2>/dev/null || true

        # Get the pane we just joined (should be the last one)
        JOINED_PANE=$(tmux list-panes -t "${WINDOW_ID}" -F '#{pane_id}' | tail -1)

        # Store the marker in user option for persistent tracking
        tmux set-option -p -t "${JOINED_PANE}" @toggle_marker "${MARKER_NAME}" 2>/dev/null || true

        # Restore saved dimensions
        SAVED_WIDTH=$(tmux show-option -pqv -t "${JOINED_PANE}" @toggle_width 2>/dev/null || true)
        SAVED_HEIGHT=$(tmux show-option -pqv -t "${JOINED_PANE}" @toggle_height 2>/dev/null || true)
        if [ -n "$SAVED_WIDTH" ]; then
            tmux resize-pane -t "${JOINED_PANE}" -x "${SAVED_WIDTH}" 2>/dev/null || true
        fi

        # Also set title for visual identification (optional, will change with commands)
        tmux select-pane -t "${JOINED_PANE}" -T "${MARKER_NAME}" 2>/dev/null || true
        tmux set-option -p -t "${JOINED_PANE}" automatic-rename off 2>/dev/null || true
    fi
else
    # Marker doesn't exist - check if there's a toggle pane to hide
    # Look for a pane with matching @toggle_marker user option
    debug "Searching for toggle pane in window $WINDOW_ID"
    TOGGLE_PANE=""
    for pane in $(tmux list-panes -t "${WINDOW_ID}" -F '#{pane_id}'); do
        marker=$(tmux show-option -pqv -t "$pane" @toggle_marker 2>/dev/null || true)
        debug "  Pane $pane has marker: '$marker'"
        if [ "$marker" = "${MARKER_NAME}" ]; then
            TOGGLE_PANE="$pane"
            debug "  -> MATCH! Found toggle pane: $TOGGLE_PANE"
            break
        fi
    done
    debug "Toggle pane search result: '$TOGGLE_PANE'"

    if [ -n "$TOGGLE_PANE" ]; then
        # Save current pane dimensions before hiding
        PANE_WIDTH=$(tmux display-message -p -t "${TOGGLE_PANE}" '#{pane_width}')
        PANE_HEIGHT=$(tmux display-message -p -t "${TOGGLE_PANE}" '#{pane_height}')
        tmux set-option -p -t "${TOGGLE_PANE}" @toggle_width "${PANE_WIDTH}" 2>/dev/null || true
        tmux set-option -p -t "${TOGGLE_PANE}" @toggle_height "${PANE_HEIGHT}" 2>/dev/null || true

        # Found the toggle pane - hide it by breaking to hidden session
        tmux break-pane -d -t "${HIDDEN_SESSION}:" -n "${MARKER_NAME}" -s "${TOGGLE_PANE}"
    else
        # No toggle pane exists - create a new one
        # Split from the main (first) pane to avoid squishing existing toggles
        MAIN_PANE=$(tmux list-panes -t "${WINDOW_ID}" -F '#{pane_id}' | head -1)

        # Split horizontally with 30% width, preserve current path
        # Use -P -F to get the new pane ID directly (reliable!)
        NEW_PANE=$(tmux split-window -h -p 30 -c "#{pane_current_path}" -t "${MAIN_PANE}" -P -F '#{pane_id}')
        debug "Created new pane: $NEW_PANE"

        # Store the marker in user option for persistent tracking
        debug "Setting marker '$MARKER_NAME' on pane $NEW_PANE"
        tmux set-option -p -t "${NEW_PANE}" @toggle_marker "${MARKER_NAME}" 2>/dev/null || true

        # Verify it was set
        VERIFY_MARKER=$(tmux show-option -pqv -t "${NEW_PANE}" @toggle_marker 2>/dev/null || true)
        debug "Verified marker on $NEW_PANE: '$VERIFY_MARKER'"

        # Run initial command if provided
        if [ -n "$INIT_COMMAND" ]; then
            debug "Running init command: $INIT_COMMAND"
            tmux send-keys -t "${NEW_PANE}" "$INIT_COMMAND" Enter 2>/dev/null || true
        fi

        # Also set title for visual identification (optional, will change with commands)
        tmux select-pane -t "${NEW_PANE}" -T "${MARKER_NAME}" 2>/dev/null || true
        tmux set-option -p -t "${NEW_PANE}" automatic-rename off 2>/dev/null || true
    fi
fi
