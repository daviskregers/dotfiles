snippet test "New PHPUnit test function" !b
/**
 * @test
 * @covers Example::doSomething
 * @SuppressWarnings(PHPMD.CamelCaseMethodName)
 */
public function test_${1:it_can_add_two_numbers}(): void
{
	$this->assertTrue(true);
}
endsnippet

snippet <?phpt "new test class" !b
<?php

declare(strict_types=1);

namespace Tests\${1:Unit}\${3:}

use Test\TestCase;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ${2:Calculator}Test extends TestCase
{
	use DatabaseTransactions;

	${3:}
}
endsnippet

snippet <?php "new php file starter" !b
<?php

declare(strict_types=1);

namespace ${1:App};

class ${2:Calculator}
{
	${3:}
}
endsnippet

snippet fn "new php function" !b
private function ${1:doSomething}(): void
{
	${2:throw new Exception('not implemented!');}
}
endsnippet

snippet exc "throw exception" !b
throw new Exception('${1:not implemented}');
endsnippet

snippet vd "var_dump and die" !b
var_dump(${1:true}); die;
endsnippet

snippet var "var type hint" !b
/**
 * @var ${1:Class}
 */
endsnippet

snippet doc "docblock" !b
/**
 * ${1}
 */
endsnippet

snippet param "param docblock" !b
/**
 * @param ${1:bool} ${2:$something} ${3:description}
 */
endsnippet

snippet return "return docblock" !b
/**
 * @return ${1:bool}
 */
endsnippet
