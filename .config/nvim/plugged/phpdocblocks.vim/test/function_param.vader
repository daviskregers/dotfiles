
======================================================

Given (No parameters just whitespace):
  public function test(                  )
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @return void
   */
  public function test(                  )
  {
  }

======================================================

Given (No parameters just whitespace and a newline):
  public function test(
                         )
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @return void
   */
  public function test(
                         )
  {
  }

======================================================

Given (Single parameter - no default or type hinting):
  public function test($param)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  $param
   * @return void
   */
  public function test($param)
  {
  }

======================================================

Given (Multiple parameters - no default or type hinting):
  public function test($param, $param2, $param3, $param4, $param5)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  $param
   * @param  $param2
   * @param  $param3
   * @param  $param4
   * @param  $param5
   * @return void
   */
  public function test($param, $param2, $param3, $param4, $param5)
  {
  }

======================================================

Given (Multiple parameters - with default and type hinting - on new lines):
  public function test(
                        string $param = "string" , 
                        int $param2 = 734734 , 
                        float $param3 = 3434.474 , 
                        bool $param4 = true , 
                        array $param5 = ["array","array2"]
  )
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string $param
   * @param  int $param2
   * @param  float $param3
   * @param  bool $param4
   * @param  array $param5
   * @return void
   */
  public function test(
                        string $param = "string" , 
                        int $param2 = 734734 , 
                        float $param3 = 3434.474 , 
                        bool $param4 = true , 
                        array $param5 = ["array","array2"]
  )
  {
  }

======================================================

Given (Multiple parameters - with default, type hinting or no hinting/default):
  public function test($param, int $param2, float $param3, $param4 = true, $param5 = ["array","array2"])
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  $param
   * @param  int $param2
   * @param  float $param3
   * @param  bool $param4
   * @param  array $param5
   * @return void
   */
  public function test($param, int $param2, float $param3, $param4 = true, $param5 = ["array","array2"])
  {
  }

======================================================

Given (Parameter - by reference):
  public function test(&$test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  &$test
   * @return void
   */
  public function test(&$test)
  {
  }

======================================================

Given (Parameter - by reference - multiple):
  public function test(&$test, &$test2, &$test3)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  &$test
   * @param  &$test2
   * @param  &$test3
   * @return void
   */
  public function test(&$test, &$test2, &$test3)
  {
  }

======================================================

Given (Parameter - by reference - typehint):
  public function test(string &$test, int &$test2, array &$test3)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string &$test
   * @param  int &$test2
   * @param  array &$test3
   * @return void
   */
  public function test(string &$test, int &$test2, array &$test3)
  {
  }

======================================================

Given (Parameter - by reference - default):
  public function test(&$test = "string", &$test2 = 743843, &$test3 = ["one","two"])
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string &$test
   * @param  int &$test2
   * @param  array &$test3
   * @return void
   */
  public function test(&$test = "string", &$test2 = 743843, &$test3 = ["one","two"])
  {
  }

======================================================

Given (Parameter - by reference - typehint and default):
  public function test(string &$test = "string", int &$test2 = 743843, array &$test3 = ["one","two"])
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string &$test
   * @param  int &$test2
   * @param  array &$test3
   * @return void
   */
  public function test(string &$test = "string", int &$test2 = 743843, array &$test3 = ["one","two"])
  {
  }

======================================================

Given (Parameter with default value - string - double quotes):
  public function test($test = "fu'nct,ion\" name()}{")
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string $test
   * @return void
   */
  public function test($test = "fu'nct,ion\" name()}{")
  {
  }

======================================================

Given (Parameter with default value - string - single quotes):
  public function test($test = 'fu"nct,ion\' name()}{')
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string $test
   * @return void
   */
  public function test($test = 'fu"nct,ion\' name()}{')
  {
  }

======================================================

Given (Parameter with default value - string - double quotes - multi-line string):
  public function test($test = "fu'nct
  io,n\" na
  me(){}")
  {
    return "string";
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string $test
   * @return string
   */
  public function test($test = "fu'nct
  io,n\" na
  me(){}")
  {
    return "string";
  }

======================================================

Given (Parameter with default value - string - single quotes - multi-line string):
  public function test($test = 'fu"nct,
  ion\' na
  me(){}')
  {
    return "string";
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string $test
   * @return string
   */
  public function test($test = 'fu"nct,
  ion\' na
  me(){}')
  {
    return "string";
  }

======================================================

Given (Parameter with default value - string - double quotes - multi-line string with opening and closing brace):
  public function test($test = "test 
  multi
  line
  parameter
  with {}")
  {
    return "string";
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string $test
   * @return string
   */
  public function test($test = "test 
  multi
  line
  parameter
  with {}")
  {
    return "string";
  }

======================================================

Given (Parameter with default value - string - single quotes - multi-line string with opening and closing brace):
  public function test($test = 'test 
  multi
  line
  parameter
  with {}')
  {
    return "string";
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string $test
   * @return string
   */
  public function test($test = 'test 
  multi
  line
  parameter
  with {}')
  {
    return "string";
  }

======================================================

Given (Parameter with default value - integer - unsigned):
  public function test($test = 3796434)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  int $test
   * @return void
   */
  public function test($test = 3796434)
  {
  }

======================================================

Given (Parameter with default value - integer - signed positive):
  public function test($test = +3796434)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  int $test
   * @return void
   */
  public function test($test = +3796434)
  {
  }

======================================================

Given (Parameter with default value - integer - signed negative):
  public function test($test = -3796434)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  int $test
   * @return void
   */
  public function test($test = -3796434)
  {
  }

======================================================

Given (Parameter with default value - float - unsigned):
  public function test($test = 3796.434)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  float $test
   * @return void
   */
  public function test($test = 3796.434)
  {
  }

======================================================

Given (Parameter with default value - float - signed positive):
  public function test($test = +3796.434)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  float $test
   * @return void
   */
  public function test($test = +3796.434)
  {
  }

======================================================

Given (Parameter with default value - float - signed negative):
  public function test($test = -3796.434)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  float $test
   * @return void
   */
  public function test($test = -3796.434)
  {
  }

======================================================

Given (Parameter with default value - boolean - true - lowercase):
  public function test($test = true)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  bool $test
   * @return void
   */
  public function test($test = true)
  {
  }

======================================================

Given (Parameter with default value - boolean - false - lowercase):
  public function test($test = false)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  bool $test
   * @return void
   */
  public function test($test = false)
  {
  }

======================================================

Given (Parameter with default value - boolean - TrUe - mixed-case):
  public function test($test = TrUe)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  bool $test
   * @return void
   */
  public function test($test = TrUe)
  {
  }

======================================================

Given (Parameter with default value - boolean - FaLsE - mixed-case):
  public function test($test = FaLsE)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  bool $test
   * @return void
   */
  public function test($test = FaLsE)
  {
  }

======================================================

Given (Parameter with default value - array - array()):
  public function test($test = array("test",'test2'))
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  array $test
   * @return void
   */
  public function test($test = array("test",'test2'))
  {
  }

======================================================

Given (Parameter with default value - array - [] - Associative):
  public function test($test = ["elementOne" => "one", "elementTwo" => "two", "elementThree" => "three"])
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  array $test
   * @return void
   */
  public function test($test = ["elementOne" => "one", "elementTwo" => "two", "elementThree" => "three"])
  {
  }

======================================================

Given (Parameter with default value - array - [] - Associative - Multidimensional):
  public function test($test = ["elementOne" => ["elementOne" => "one", "elementTwo" => "two", "elementThree" => ["elementOne" => "one", "elementTwo" => "two", "elementThree" => "three"]], "elementTwo" => "two", "elementThree" => "three"])
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  array $test
   * @return void
   */
  public function test($test = ["elementOne" => ["elementOne" => "one", "elementTwo" => "two", "elementThree" => ["elementOne" => "one", "elementTwo" => "two", "elementThree" => "three"]], "elementTwo" => "two", "elementThree" => "three"])
  {
  }

======================================================

Given (Parameter with default value - array - array() - Associative):
  public function test($test = array("elementOne" => "one", "elementTwo" => "two", "elementThree" => "three"))
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  array $test
   * @return void
   */
  public function test($test = array("elementOne" => "one", "elementTwo" => "two", "elementThree" => "three"))
  {
  }

======================================================

Given (Parameter with default value - array - array() - Associative - Multidimensional):
  public function test($test = array("elementOne" => array("elementOne" => , "elementTwo" => "two", "elementThree" => "three"), "elementTwo" => array("elementOne" => , "elementTwo" => "two", "elementThree" => "three"), "elementThree" => "three"))
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  array $test
   * @return void
   */
  public function test($test = array("elementOne" => array("elementOne" => , "elementTwo" => "two", "elementThree" => "three"), "elementTwo" => array("elementOne" => , "elementTwo" => "two", "elementThree" => "three"), "elementThree" => "three"))
  {
  }

======================================================

Given (Parameter with default value - array - array() - Multidimensional):
  public function test($test = array(array(1,2), array(1,2), array(array(1,2), array(1,2))))
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  array $test
   * @return void
   */
  public function test($test = array(array(1,2), array(1,2), array(array(1,2), array(1,2))))
  {
  }

======================================================

Given (Parameter with default value - array - Mixed: array() and [] - Multidimensional):
  public function test($test = array(array(1,2), [array(1, 2), array(1, 2)], array([1,2], [1,2])))
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  array $test
   * @return void
   */
  public function test($test = array(array(1,2), [array(1, 2), array(1, 2)], array([1,2], [1,2])))
  {
  }

======================================================

Given (Parameter with default value - array - []):
  public function test($test = ["test",'test2'])
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  array $test
   * @return void
   */
  public function test($test = ["test",'test2'])
  {
  }

======================================================

Given (Parameter with default value - array - [] - Multidimensional):
  public function test($test = [[1], [2], [[1], [2]]])
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  array $test
   * @return void
   */
  public function test($test = [[1], [2], [[1], [2]]])
  {
  }

======================================================

Given (Parameter with default value - null - lowercase):
  public function test($test = null)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  null $test
   * @return void
   */
  public function test($test = null)
  {
  }

======================================================

Given (Parameter with default value - NULL - Uppercase):
  public function test($test = NULL)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  null $test
   * @return void
   */
  public function test($test = NULL)
  {
  }

======================================================

Given (Parameter with default value - Default of null with different type hint):
  public function test(Type $test = null)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  Type|null $test
   * @return void
   */
  public function test(Type $test = null)
  {
  }

======================================================

Given (Parameter with default value - Nullable):
  public function test(?Type $test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  Type|null $test
   * @return void
   */
  public function test(?Type $test)
  {
  }

======================================================

Given (Parameter with default value - Nullable - with default value null):
  public function test(?Type $test = null)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  Type|null $test
   * @return void
   */
  public function test(?Type $test = null)
  {
  }

======================================================

Given (Parameter - string Nullable):
  public function test(?string $test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string|null $test
   * @return void
   */
  public function test(?string $test)
  {
  }

======================================================

Given (Parameter with default value null - Nullable):
  public function test(?string $test = null)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string|null $test
   * @return void
   */
  public function test(?string $test = null)
  {
  }

======================================================

Given (Parameter with default value a string - Nullable):
  public function test(?string $test = "string")
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string|null $test
   * @return void
   */
  public function test(?string $test = "string")
  {
  }

======================================================

Given (Parameter with type hint - string):
  public function test(string $test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  string $test
   * @return void
   */
  public function test(string $test)
  {
  }

======================================================

Given (Parameter with type hint - int):
  public function test(int $test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  int $test
   * @return void
   */
  public function test(int $test)
  {
  }

======================================================

Given (Parameter with type hint - integer):
  public function test(integer $test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  int $test
   * @return void
   */
  public function test(integer $test)
  {
  }

======================================================

Given (Parameter with type hint - float):
  public function test(float $test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  float $test
   * @return void
   */
  public function test(float $test)
  {
  }

======================================================

Given (Parameter with type hint - bool):
  public function test(bool $test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  bool $test
   * @return void
   */
  public function test(bool $test)
  {
  }

======================================================

Given (Parameter with type hint - boolean):
  public function test(boolean $test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  bool $test
   * @return void
   */
  public function test(boolean $test)
  {
  }

======================================================

Given (Parameter with type hint - array):
  public function test(array $test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  array $test
   * @return void
   */
  public function test(array $test)
  {
  }

======================================================

Given (Parameter with type hint - callable):
  public function test(callable $test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  callable $test
   * @return void
   */
  public function test(callable $test)
  {
  }

======================================================

Given (Parameter with type hint - object):
  public function test(User $test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  User $test
   * @return void
   */
  public function test(User $test)
  {
  }

======================================================

Given (Variadic Function):
  public function test(...$test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  mixed $test,...
   * @return void
   */
  public function test(...$test)
  {
  }

======================================================

Given (Variadic Function with typehint):
  public function test(int ...$test)
  {
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * test
   *
   * @param  int $test,...
   * @return void
   */
  public function test(int ...$test)
  {
  }
