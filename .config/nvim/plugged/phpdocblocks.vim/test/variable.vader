" TODO:

======================================================

Given (Variable - No Type - No Value):
  $variable;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $variable */
  $variable;

======================================================

Given (Variable - No Type):
  $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $variable */
  $variable = $var;

======================================================

Given (Variable - Public - String - Defined over multiple lines):
  public
  $variable

  =

  "This{

  is a

  string;

  "

  ;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var string $variable */
  public
  $variable

  =

  "This{

  is a

  string;

  "

  ;

======================================================

Given (Variable - Public - String - String contains PHP keywords):
  public $variable = "class function const define(";

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var string $variable */
  public $variable = "class function const define(";

======================================================

Given (Variable - Property - No Type - No Value - Public):
  public $variable;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $variable */
  public $variable;

======================================================

Given (Variable - No Type - Static):
  static $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $variable */
  static $variable = $var;

======================================================

Given (Variable - int - Static):
  static int $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var int $variable */
  static int $variable = $var;

======================================================

Given (Variable - No Type - Public - Static):
  public static $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $variable */
  public static $variable = $var;

======================================================

Given (Variable - int - Public - Static):
  public static int $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var int $variable */
  public static int $variable = $var;

======================================================

Given (Variable - No Type - Public):
  public $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $variable */
  public $variable = $var;

======================================================

Given (Variable - No Type - Private):
  private $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $variable */
  private $variable = $var;

======================================================

Given (Variable - No Type - Protected):
  protected $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $variable */
  protected $variable = $var;

======================================================

Given (Variable - Inferred Type - String - Double Quotes):
  $variable = "string";

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var string $variable */
  $variable = "string";

======================================================

Given (Variable - Inferred Type - String - Single Quotes):
  $variable = 'string';

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var string $variable */
  $variable = 'string';

======================================================

Given (Variable - Inferred Type - Integer - Unsigned):
  $variable = 123;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var int $variable */
  $variable = 123;

======================================================

Given (Variable - Inferred Type - Integer - Signed - Positive):
  $variable = +123;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var int $variable */
  $variable = +123;

======================================================

Given (Variable - Inferred Type - Integer - Signed - Negative):
  $variable = -123;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var int $variable */
  $variable = -123;

======================================================

Given (Variable - Inferred Type - Float - Unsigned):
  $variable = 123.123;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var float $variable */
  $variable = 123.123;

======================================================

Given (Variable - Inferred Type - Float - Signed - Positive):
  $variable = +123.123;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var float $variable */
  $variable = +123.123;

======================================================

Given (Variable - Inferred Type - Float - Signed - Negative):
  $variable = -123.123;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var float $variable */
  $variable = -123.123;

======================================================

Given (Variable - Inferred Type - Boolean - True):
  $variable = true;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var bool $variable */
  $variable = true;

======================================================

Given (Variable - Inferred Type - Boolean - False):
  $variable = false;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var bool $variable */
  $variable = false;

======================================================

Given (Variable - Inferred Type - Boolean - True - Mixed Case):
  $variable = TrUe;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var bool $variable */
  $variable = TrUe;

======================================================

Given (Variable - Inferred Type - Array - Square Brackets - Empty):
  $variable = [];

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = [];

======================================================

Given (Variable - Inferred Type - Array - Square Brackets - Mixed Array Element Types):
  $variable = ["one", 'two', 3, 3.1, true];

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = ["one", 'two', 3, 3.1, true];

======================================================

Given (Variable - Inferred Type - Array - Square Brackets - Multidimensional):
  $variable = [[1], [2], [[1], [2]]];

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = [[1], [2], [[1], [2]]];

======================================================

Given (Variable - Inferred Type - Array - array() - Empty):
  $variable = array();

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = array();

======================================================

Given (Variable - Inferred Type - Array - array() - Mixed Array Element Types):
  $variable = array("one", 'two', 3, 3.1, true);

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = array("one", 'two', 3, 3.1, true);

======================================================

Given (Variable - Inferred Type - Array - array() - Multidimensional):
  $variable = array(array(1,2), array(1,2), array(array(1,2), array(1,2)));

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = array(array(1,2), array(1,2), array(array(1,2), array(1,2)));

======================================================

Given (Variable - Inferred Type - Array - Mixed:  array() and [] - Multidimensional):
  $variable = array(array(1,2), [array(1, 2), array(1, 2)], array([1,2], [1,2]));

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = array(array(1,2), [array(1, 2), array(1, 2)], array([1,2], [1,2]));

======================================================

Given (Variable - Inferred Type - Array - Mixed:  array() and [] - Multidimensional - [] first):
  $variable = [array(1,2), [array([1, 2], 2), array(1, 2)], array([1,2], [1,2])];

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = [array(1,2), [array([1, 2], 2), array(1, 2)], array([1,2], [1,2])];

======================================================

Given (Variable - Inferred Type - Array - [] - Associative):
  $variable = ["elementOne" => "one", "elementTwo" => "two", "elementThree" => "three"];

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = ["elementOne" => "one", "elementTwo" => "two", "elementThree" => "three"];

======================================================

Given (Variable - Inferred Type - Array - [] - Associative - Multidimensional):
  $variable = ["elementOne" => ["elementOne" => "one", "elementTwo" => "two", "elementThree" => ["elementOne" => "one", "elementTwo" => "two", "elementThree" => "three"]], "elementTwo" => "two", "elementThree" => "three"];

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = ["elementOne" => ["elementOne" => "one", "elementTwo" => "two", "elementThree" => ["elementOne" => "one", "elementTwo" => "two", "elementThree" => "three"]], "elementTwo" => "two", "elementThree" => "three"];

======================================================

Given (Variable - Inferred Type - Array - array() - Associative):
  $variable = array("elementOne" => "one", "elementTwo" => "two", "elementThree" => "three");

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = array("elementOne" => "one", "elementTwo" => "two", "elementThree" => "three");

======================================================

Given (Variable - Inferred Type - Array - array() - Associative - Multidimensional):
  $variable = array("elementOne" => array("elementOne" => , "elementTwo" => "two", "elementThree" => "three"), "elementTwo" => array("elementOne" => , "elementTwo" => "two", "elementThree" => "three"), "elementThree" => "three");

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  $variable = array("elementOne" => array("elementOne" => , "elementTwo" => "two", "elementThree" => "three"), "elementTwo" => array("elementOne" => , "elementTwo" => "two", "elementThree" => "three"), "elementThree" => "three");

======================================================

Given (Variable - Inferred Type - Null):
  $variable = null;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var null $variable */
  $variable = null;

======================================================

Given (Variable - Inferred Type - Null - Mixed Case):
  $variable = NuLl;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var null $variable */
  $variable = NuLl;

======================================================

Given (Variable - Inferred Type - Object):
  $variable = new Foo;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var Foo $variable */
  $variable = new Foo;

======================================================

Given (Variable - Inferred Type - Object - With ()):
  $variable = new Foo();

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var Foo $variable */
  $variable = new Foo();

======================================================

Given (Variable - Declared Type - String):
  string $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var string $variable */
  string $variable = $var;

======================================================

Given (Variable - Declared Type - Integer):
  int $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var int $variable */
  int $variable = $var;

======================================================

Given (Variable - Declared Type - Float):
  float $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var float $variable */
  float $variable = $var;

======================================================

Given (Variable - Declared Type - Boolean):
  bool $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var bool $variable */
  bool $variable = $var;

======================================================

Given (Variable - Declared Type - Array):
  array $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var array $variable */
  array $variable = $var;

======================================================

Given (Variable - Declared Type - Null):
  null $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var null $variable */
  null $variable = $var;

======================================================

Given (Variable - Declared Type - Object):
  User $variable = $var;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var User $variable */
  User $variable = $var;

======================================================

Given (Variable - Function block below variable):
  User $variable = $var;
  public function test($var = "string") {
      $test = 123;
  }

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var User $variable */
  User $variable = $var;
  public function test($var = "string") {
      $test = 123;
  }

======================================================

Given (Variable - Multiline):
  $variable
             =
                      "string"
                                        ;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var string $variable */
  $variable
             =
                      "string"
                                        ;

======================================================

Given (Variable - Single Property):
  protected $name;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $name */
  protected $name;

======================================================

Given (Variable - Multiple properties defined at once):
  protected $name, $address, $v3, $v4, $v5, $v6;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * @var $name
   * @var $address
   * @var $v3
   * @var $v4
   * @var $v5
   * @var $v6
   */
  protected $name, $address, $v3, $v4, $v5, $v6;

======================================================

Given (Variable - Multiple properties defined at once - Type Hinted):
  private int $name, $address, $v3, $v4, $v5, $v6;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * @var int $name
   * @var int $address
   * @var int $v3
   * @var int $v4
   * @var int $v5
   * @var int $v6
   */
  private int $name, $address, $v3, $v4, $v5, $v6;

======================================================

Given (Variable - Multiple properties defined at once - Type Hinted - No declared visibility):
  string $name, $address, $v3, $v4, $v5, $v6;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * @var string $name
   * @var string $address
   * @var string $v3
   * @var string $v4
   * @var string $v5
   * @var string $v6
   */
  string $name, $address, $v3, $v4, $v5, $v6;

======================================================

Given (Variable - Multiple variables declared at once - Value):
  $v1 = $v2 = $v3 = $v4 = $v5 = $v6 = array();

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * @var array $v1
   * @var array $v2
   * @var array $v3
   * @var array $v4
   * @var array $v5
   * @var array $v6
   */
  $v1 = $v2 = $v3 = $v4 = $v5 = $v6 = array();

======================================================

Given (Variable - Multiple variables declared at once - Type Hinted):
  int $v1 = $v2 = $v3 = $v4 = $v5 = $v6;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /**
   * @var int $v1
   * @var int $v2
   * @var int $v3
   * @var int $v4
   * @var int $v5
   * @var int $v6
   */
  int $v1 = $v2 = $v3 = $v4 = $v5 = $v6;

======================================================

Given (Variable - No Type - $this->):
  $this->config = $config;

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $this->config */
  $this->config = $config;

======================================================

Given (Variable - No Type - Daisy Chaining):
  $client = DB::table('users')->where('name')->first();

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $client */
  $client = DB::table('users')->where('name')->first();

======================================================

Given (Variable - No Type - Commas for parameters):
  $test = myFunction('test', 0, "for", "commas");

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $test */
  $test = myFunction('test', 0, "for", "commas");

======================================================

Given (Variable - No Type - Commas for parameters - Nested Parentheses):
  $test = myFunction(myFunction2("test", 0, myFunction3("test", 0)), 'test', 0, "for");

Execute:
  call phpdocblocks#insert("test")

Expect:
  /** @var $test */
  $test = myFunction(myFunction2("test", 0, myFunction3("test", 0)), 'test', 0, "for");

